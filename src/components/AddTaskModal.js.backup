'use client';

import { useState, useEffect, forwardRef, useImperativeHandle } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Avatar } from '@/components/ui/avatar';
import { collection, query, getDocs, where } from 'firebase/firestore';
import { db } from '@/lib/firebase';
import useMediaStore from '@/store/mediaStore';
import { TASK_TYPES, TASK_PRIORITY } from '@/lib/utils';
import { Calendar, Clock, UploadCloud, FileText, Briefcase, User2, CheckCircle2, File, FileImage, FileVideo, Music, Archive, X, Plus, Minus, Layers, Toggle } from 'lucide-react';

export const AddTaskModal = forwardRef(function AddTaskModal({ onSubmit, children, initialAttachments = [] }, ref) {
  const [open, setOpen] = useState(false);
  const [attachments, setAttachments] = useState([]);
  const { uploadFiles } = useMediaStore();
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    type: '',
    priority: '',
    assignee: '',
    channel: '',
    deadline: new Date().toISOString().slice(0, 10), // YYYY-MM-DD format for date input
    isTaskGroup: false,
    taskGroup: ''
  });

  const [subtasks, setSubtasks] = useState([{ title: '', assignee: '', deadline: '', priority: '', description: '' }]);

  // Helper functions for subtask management
  const addSubtask = () => {
    setSubtasks([...subtasks, { title: '', assignee: '', deadline: '', priority: '', description: '' }]);
  };

  const removeSubtask = (index) => {
    if (subtasks.length > 1) {
      setSubtasks(subtasks.filter((_, i) => i !== index));
    }
  };

  const updateSubtask = (index, field, value) => {
    const updated = subtasks.map((subtask, i) => 
      i === index ? { ...subtask, [field]: value } : subtask
    );
    setSubtasks(updated);
  };

  // Helper function to get file type icon
  const getFileIcon = (file) => {
    const fileType = file.type?.toLowerCase() || '';
    const fileName = file.original_filename?.toLowerCase() || '';
    
    // Adobe files
    if (fileName.endsWith('.psd') || fileName.endsWith('.ai') || fileName.endsWith('.indd')) {
      return <div className="w-4 h-4 bg-purple-500 rounded text-white text-xs flex items-center justify-center font-bold">A</div>;
    }
    // Audio files
    if (fileType.startsWith('audio/') || fileName.endsWith('.mp3') || fileName.endsWith('.wav')) {
      return <Music className="w-4 h-4 text-green-500" />;
    }
    // Video files
    if (fileType.startsWith('video/') || fileName.endsWith('.mp4') || fileName.endsWith('.mov')) {
      return <FileVideo className="w-4 h-4 text-blue-500" />;
    }
    // Image files
    if (fileType.startsWith('image/')) {
      return <FileImage className="w-4 h-4 text-purple-500" />;
    }
    // PDF files
    if (fileType === 'application/pdf' || fileName.endsWith('.pdf')) {
      return <div className="w-4 h-4 bg-red-500 rounded text-white text-xs flex items-center justify-center font-bold">P</div>;
    }
    // Text files
    if (fileType.startsWith('text/') || fileName.endsWith('.txt')) {
      return <FileText className="w-4 h-4 text-gray-500" />;
    }
    // Archive files
    if (fileName.endsWith('.zip') || fileName.endsWith('.rar')) {
      return <Archive className="w-4 h-4 text-yellow-500" />;
    }
    // Default
    return <File className="w-4 h-4 text-gray-400" />;
  };

  // Expose methods to parent component
  useImperativeHandle(ref, () => ({
    openWithFiles: (files) => {
      const fileAttachments = files.map(file => ({
        original_filename: file.name,
        size: file.size,
        type: file.type,
      }));
      setAttachments(fileAttachments);
      setOpen(true);
    }
  }));

  // Handle initial attachments when modal opens
  useEffect(() => {
    if (open && initialAttachments.length > 0) {
  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
      if (formData.isTaskGroup && subtasks.length > 1) {
        // Create task group - create multiple tasks with the same taskGroup identifier
        const taskGroupName = formData.title;
        const baseTaskData = {
          type: formData.type,
          channel: formData.channel,
          attachments,
          status: 'active',
          createdAt: new Date(),
          taskGroup: taskGroupName
        };

        // Create each subtask
        for (const subtask of subtasks) {
          if (subtask.title.trim()) {
            await onSubmit({
              ...baseTaskData,
              title: subtask.title,
              description: subtask.description || formData.description,
              priority: subtask.priority || formData.priority,
              assignee: subtask.assignee || formData.assignee,
              deadline: new Date(subtask.deadline || formData.deadline),
            });
          }
        }
      } else {
        // Create single task
        await onSubmit({
          ...formData,
          deadline: new Date(formData.deadline),
          attachments,
          status: 'active',
          createdAt: new Date(),
        });
      }
      
      setOpen(false);
      setFormData({
        title: '',
        description: '',
        type: '',
        priority: '',
        assignee: '',
        channel: '',
        deadline: new Date().toISOString().slice(0, 10),
        isTaskGroup: false,
        taskGroup: ''
      });
      setSubtasks([{ title: '', assignee: '', deadline: '', priority: '', description: '' }]);
      setAttachments([]);
    } catch (error) {
      console.error('Error creating task(s):', error);
    } finally {
      setLoading(false);
                  <Input
                    id="title"
                    value={formData.title}
                    onChange={(e) =>
                      setFormData({ ...formData, title: e.target.value })
                    }
                    className="w-full transition-all duration-200 focus:ring-1 focus:ring-black border-gray-200 hover:border-gray-300"
                    placeholder={formData.isTaskGroup ? "Enter task group name" : "Enter task title"}
                    required
                  />
                </div>

                {/* Task Group Toggle */}
                <div className="space-y-2">
                  <label className="text-sm font-medium flex items-center gap-2 text-gray-700">
                    <Layers className="w-4 h-4" />
                    Task Type
                  </label>
                  <div className="flex items-center space-x-3">
                    <label className="flex items-center space-x-2 cursor-pointer">
                      <input
                        type="radio"
                        name="taskType"
                        checked={!formData.isTaskGroup}
                        onChange={() => setFormData({ ...formData, isTaskGroup: false })}
                        className="text-blue-600"
                      />
                      <span className="text-sm text-gray-700">Single Task</span>
                    </label>
                    <label className="flex items-center space-x-2 cursor-pointer">
                      <input
                        type="radio"
                        name="taskType"
                        checked={formData.isTaskGroup}
                        onChange={() => setFormData({ ...formData, isTaskGroup: true })}
                        className="text-blue-600"
                      />
                      <span className="text-sm text-gray-700">Task Group</span>
                    </label>
                  </div>
                </div>

                <div className="space-y-2">
                  <label htmlFor="deadline" className="text-sm font-medium flex items-center gap-2 text-gray-700">
                    <Calendar className="w-4 h-4" />
                    {formData.isTaskGroup ? "Default Due Date" : "Due Date"}
                  </label>
        priority: '',
        assignee: '',
        channel: '',
        deadline: new Date().toISOString().slice(0, 10), // YYYY-MM-DD format for date input
      });
      setAttachments([]);
    } catch (error) {
      console.error('Error creating task:', error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        {children || (
          <Button className="bg-gradient-to-r from-blue-900 to-blue-700 text-white gap-2 shadow-lg hover:shadow-blue-200 font-medium px-6 border border-blue-800 hover:from-blue-800 hover:to-blue-600 transition-all duration-300">
            <CheckCircle2 className="w-4 h-4" />
            Create Task
          </Button>
        )}
      </DialogTrigger>
      <DialogContent className="max-w-4xl bg-gradient-to-br from-slate-50 to-white border border-slate-200 shadow-2xl">
        <DialogHeader className="border-b border-slate-200 pb-3">
          <DialogTitle className="text-xl font-bold text-slate-800 flex items-center gap-2">
            <div className="p-1.5 bg-gradient-to-r from-blue-600 to-indigo-600 rounded-lg shadow-md">
              <CheckCircle2 className="w-5 h-5 text-white" />
            </div>
            Create New Task
          </DialogTitle>
        </DialogHeader>
{/* new */}
        <form onSubmit={handleSubmit}>
          <Card className=" bg-white/80">
            <div className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 border-0">
                <div className="space-y-2">
                  <label htmlFor="title" className="text-sm font-medium flex items-center gap-2 text-gray-700">
                    <CheckCircle2 className="w-4 h-4" />
                    Task Title
                  </label>
                  <Input
                    id="title"
                    value={formData.title}
                    onChange={(e) =>
                      setFormData({ ...formData, title: e.target.value })
                    }
                    className="w-full transition-all duration-200 focus:ring-1 focus:ring-black border-gray-200 hover:border-gray-300"
                    placeholder="Enter task title"
                    required
                  />
                </div>

                <div className="space-y-2">
                  <label htmlFor="deadline" className="text-sm font-medium flex items-center gap-2 text-gray-700">
                    <Calendar className="w-4 h-4" />
                    Due Date
                  </label>
                  <Input
                    id="deadline"
                    type="date"
                    value={formData.deadline}
                    onChange={(e) =>
                      setFormData({ ...formData, deadline: e.target.value })
                    }
                    className="w-full transition-all duration-200 focus:ring-1 focus:ring-black border-gray-200 hover:border-gray-300"
                    required
                  />
                </div>

                <div className="space-y-2">
                  <label className="text-sm font-medium flex items-center gap-2 text-gray-700">
                    <Clock className="w-4 h-4" />
                    Priority
                  </label>
                  <Select
                    value={formData.priority}
                    onValueChange={(value) =>
                      setFormData({ ...formData, priority: value })
                    }
                    required
                  >
                    <SelectTrigger className="w-full transition-all duration-200 focus:ring-1 focus:ring-black border-gray-200 hover:border-gray-300">
                      <SelectValue placeholder="Select Priority" />
                    </SelectTrigger>
                    <SelectContent>
                      {Object.values(TASK_PRIORITY).map((priority) => (
                        <SelectItem key={priority} value={priority}>
                          {priority}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <label className="text-sm font-medium flex items-center gap-2 text-gray-700">
                    <Briefcase className="w-4 h-4" />
                    Type
                  </label>
                  <Select
                    value={formData.type}
                    onValueChange={(value) =>
                      setFormData({ ...formData, type: value })
                    }
                    required
                  >
                    <SelectTrigger className="w-full transition-all duration-200 focus:ring-1 focus:ring-black border-gray-200 hover:border-gray-300">
                      <SelectValue placeholder="Select Task Type" />
                    </SelectTrigger>
                    <SelectContent>
                      {Object.values(TASK_TYPES).map((type) => (
                        <SelectItem key={type} value={type}>
                          {type}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <label className="text-sm font-medium flex items-center gap-2 text-gray-700">
                    <User2 className="w-4 h-4" />
                    Assignee
                  </label>
                  <Select
                    value={formData.assignee}
                    onValueChange={(value) =>
                      setFormData({ ...formData, assignee: value })
                    }
                    required
                  >
                    <SelectTrigger className="w-full transition-all duration-200 focus:ring-1 focus:ring-black border-gray-200 hover:border-gray-300">
                      <SelectValue placeholder="Select Assignee" />
                    </SelectTrigger>
                    <SelectContent>
                      {users.map((user) => (
                        <SelectItem key={user.email} value={user.email}
                          className="flex items-center gap-2 p-2 cursor-pointer hover:bg-gray-100"
                        >
                          <div className="flex items-center gap-2">
                            <Avatar className="h-6 w-6">
                              <div className="bg-gray-900 h-full w-full flex items-center justify-center text-white text-xs font-medium">
                                {user.displayName?.charAt(0) || user.email.charAt(0)}
                              </div>
                            </Avatar>
                            {user.displayName || user.email}
              <div className="space-y-2">
                <label htmlFor="description" className="text-sm font-medium flex items-center gap-2 text-gray-700">
                  <FileText className="w-4 h-4" />
                  {formData.isTaskGroup ? "Default Description" : "Description"}
                </label>
                <Textarea
                  id="description"
                  value={formData.description}
                  onChange={(e) =>
                    setFormData({ ...formData, description: e.target.value })
                  }
                  className="h-16 resize-none transition-all duration-200 focus:ring-1 focus:ring-black border-gray-200 hover:border-gray-300"
                  placeholder={formData.isTaskGroup ? "Enter default description for all subtasks" : "Enter task description"}
                  required
                />
              </div>

              {/* Subtasks Section - Only show if task group is enabled */}
              {formData.isTaskGroup && (
                <div className="space-y-4 border-t pt-6">
                  <div className="flex items-center justify-between">
                    <label className="text-sm font-medium flex items-center gap-2 text-gray-700">
                      <Layers className="w-4 h-4" />
                      Subtasks ({subtasks.length})
                    </label>
                    <Button
                      type="button"
                      onClick={addSubtask}
            <Button 
              type="submit"
              className="bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white font-semibold gap-2 shadow-lg hover:shadow-xl px-6 py-2 transition-all duration-300"
              disabled={loading}
            >
              {loading ? (
                <>Creating...</>
              ) : (
                <>
                  {formData.isTaskGroup ? <Layers className="w-4 h-4" /> : <CheckCircle2 className="w-4 h-4" />}
                  {formData.isTaskGroup ? `Create Task Group (${subtasks.filter(s => s.title.trim()).length} tasks)` : 'Create Task'}
                </>
              )}
            </Button>     <div className="flex-1 grid grid-cols-1 md:grid-cols-2 gap-3">
                            <div className="space-y-1">
                              <label className="text-xs font-medium text-gray-600">Subtask Title *</label>
                              <Input
                                value={subtask.title}
                                onChange={(e) => updateSubtask(index, 'title', e.target.value)}
                                placeholder="Enter subtask title"
                                className="text-sm"
                                required
                              />
                            </div>
                            <div className="space-y-1">
                              <label className="text-xs font-medium text-gray-600">Assignee</label>
                              <Select
                                value={subtask.assignee}
                                onValueChange={(value) => updateSubtask(index, 'assignee', value)}
                              >
                                <SelectTrigger className="text-sm">
                                  <SelectValue placeholder={`Use default (${formData.assignee || 'None'})`} />
                                </SelectTrigger>
                                <SelectContent>
                                  {users.map((user) => (
                                    <SelectItem key={user.email} value={user.email}>
                                      {user.displayName || user.email}
                                    </SelectItem>
                                  ))}
                                </SelectContent>
                              </Select>
                            </div>
                            <div className="space-y-1">
                              <label className="text-xs font-medium text-gray-600">Due Date</label>
                              <Input
                                type="date"
                                value={subtask.deadline}
                                onChange={(e) => updateSubtask(index, 'deadline', e.target.value)}
                                className="text-sm"
                              />
                            </div>
                            <div className="space-y-1">
                              <label className="text-xs font-medium text-gray-600">Priority</label>
                              <Select
                                value={subtask.priority}
                                onValueChange={(value) => updateSubtask(index, 'priority', value)}
                              >
                                <SelectTrigger className="text-sm">
                                  <SelectValue placeholder={`Use default (${formData.priority || 'Medium'})`} />
                                </SelectTrigger>
                                <SelectContent>
                                  {Object.values(TASK_PRIORITY).map((priority) => (
                                    <SelectItem key={priority} value={priority}>
                                      {priority}
                                    </SelectItem>
                                  ))}
                                </SelectContent>
                              </Select>
                            </div>
                            <div className="space-y-1 md:col-span-2">
                              <label className="text-xs font-medium text-gray-600">Description</label>
                              <Textarea
                                value={subtask.description}
                                onChange={(e) => updateSubtask(index, 'description', e.target.value)}
                                placeholder="Use default description or enter specific description"
                                className="text-sm h-12"
                              />
                            </div>
                          </div>
                          {subtasks.length > 1 && (
                            <Button
                              type="button"
                              onClick={() => removeSubtask(index)}
                              variant="ghost"
                              size="sm"
                              className="text-red-600 hover:text-red-700 hover:bg-red-50"
                            >
                              <Minus className="w-4 h-4" />
                            </Button>
                          )}
                        </div>
                      </Card>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </Card>   required
                  >
                    <SelectTrigger className="w-full transition-all duration-200 focus:ring-1 focus:ring-black border-gray-200 hover:border-gray-300">
                      <SelectValue placeholder="Select Channel" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="animation-fastfood">Animation Fastfood</SelectItem>
                      <SelectItem value="epictoons">EpicToons</SelectItem>
                      <SelectItem value="alpha-recap">Alpha Recap</SelectItem>
                      <SelectItem value="super-recap">Super Recap</SelectItem>
                      <SelectItem value="beta-recap">Beta Recap</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-1 gap-4">
                <div className="space-y-2">
                  <label className="text-sm font-medium flex items-center gap-2 text-gray-700">
                    <UploadCloud className="w-4 h-4" />
                    Attachments
                  </label>
                  <div className="space-y-2">
                    <Input
                      type="file"
                      multiple
                      onChange={async (e) => {
                        const files = Array.from(e.target.files || []);
                        if (files.length === 0) return;

                        // Upload files to media store and get their metadata
                        const uploads = await uploadFiles(files, { name: 'Current User', uid: 'current-user' });
                        
                        // Add to local attachments (these will be references to uploaded media)
                        const newAttachments = files.map((file) => ({
                          original_filename: file.name,
                          size: file.size,
                          type: file.type
                        }));
                        
                        setAttachments((prev) => [...prev, ...newAttachments]);
                        e.target.value = ''; // Reset input
                      }}
                      accept="*/*"
                      className="cursor-pointer"
                    />
                    {attachments.length > 0 && (
                      <div className="mt-2">
                        <p className="text-xs text-gray-500 font-medium mb-2">Attached Files:</p>
                        <div className="grid grid-cols-3 gap-2">
                          {attachments.map((file, index) => (
                            <div key={index} className="relative flex flex-col items-center p-2 bg-gray-50 rounded-md group hover:bg-gray-100 transition-colors">
                              {getFileIcon(file)}
                              <span className="text-xs text-gray-700 text-center truncate w-full mt-1">{file.original_filename}</span>
                              <button
                                type="button"
                                onClick={() =>
                                  setAttachments((prev) => prev.filter((_, i) => i !== index))
                                }
                                className="absolute -top-1 -right-1 bg-red-500 text-white rounded-full w-4 h-4 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-all text-xs"
                              >
                                ×
                              </button>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
              
              <div className="space-y-2">
                <label htmlFor="description" className="text-sm font-medium flex items-center gap-2 text-gray-700">
                  <FileText className="w-4 h-4" />
                  Description
                </label>
                <Textarea
                  id="description"
                  value={formData.description}
                  onChange={(e) =>
                    setFormData({ ...formData, description: e.target.value })
                  }
                  className="h-16 resize-none transition-all duration-200 focus:ring-1 focus:ring-black border-gray-200 hover:border-gray-300"
                  placeholder="Enter task description"
                  required
                />
              </div>
            </div>
          </Card>

          <div className="flex justify-end space-x-4 mt-4 pt-4 border-t border-slate-200">
            <Button
              type="button"
              variant="outline"
              onClick={() => setOpen(false)}
              className="border border-slate-300 hover:bg-slate-50 text-slate-700 px-4 py-2"
            >
              Cancel
            </Button>
            <Button 
              type="submit"
              className="bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white font-semibold gap-2 shadow-lg hover:shadow-xl px-6 py-2 transition-all duration-300"
              disabled={loading}
            >
              {loading ? (
                <>Creating...</>
              ) : (
                <>
                  <CheckCircle2 className="w-4 h-4" />
                  Create Task
                </>
              )}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
});


